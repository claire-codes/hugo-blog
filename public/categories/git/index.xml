<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Claire Parker-Jones Blog</title>
    <link>http://example.org/categories/git/</link>
    <description>Recent content in Git on Claire Parker-Jones Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 13 Mar 2018 22:45:59 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/categories/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deleting multiple local git branches with grep</title>
      <link>http://example.org/blog/2018-03-13-deleting-multiple-local-git-branches-with-grep/</link>
      <pubDate>Tue, 13 Mar 2018 22:45:59 +0000</pubDate>
      
      <guid>http://example.org/blog/2018-03-13-deleting-multiple-local-git-branches-with-grep/</guid>
      <description>After working for a while on a project, it’s likely that you’ll have a lot of branches checked out locally. Branches quickly expire and are no longer needed, so it’s a good idea to delete them. But if you’re like me, you don’t do this very regularly! When I type git branch into the terminal I&amp;rsquo;m confronted with dozens of dead branches.
Delete local branches by typing git branch -D branch-name in your terminal.</description>
    </item>
    
    <item>
      <title>Do your own dotfiles</title>
      <link>http://example.org/blog/2018-02-19-dotfiles-new-machine/</link>
      <pubDate>Mon, 19 Feb 2018 21:35:19 +0000</pubDate>
      
      <guid>http://example.org/blog/2018-02-19-dotfiles-new-machine/</guid>
      <description>A new job brings lots of changes, including a new laptop or computer. I’m lucky enough to have been able to use a MacBook in all of my developer jobs. (Once you go Mac you never go back!) I recently started a new job and found myself starting from scratch again. I began by downloading Atom, replaced Terminal with iTerm2 and installed some other handy apps.
I used my dotfiles to customise my terminal prompt, and thanked Past Claire for committing the code for this to the repo.</description>
    </item>
    
    <item>
      <title>Global gitignores - is this thing on?</title>
      <link>http://example.org/blog/2017-04-06-global-gitignores/</link>
      <pubDate>Thu, 06 Apr 2017 22:05:26 +0000</pubDate>
      
      <guid>http://example.org/blog/2017-04-06-global-gitignores/</guid>
      <description>Do you get tired of typing out echo node_modules/ &amp;gt; .gitignore every time you create a new JavaScript project? Do you always forget and commit those pesky node modules to GitHub anyway? And what about those npm_debug.log or .DS_Store files (what even is .DS_Store⁉️)?
Well help is at hand to save you yet more precious keystrokes. Create a ✨global gitignore✨ file which will be used by all your git repos locally on your machine and you may never need to write a .</description>
    </item>
    
    <item>
      <title>Git Aliases</title>
      <link>http://example.org/blog/2016-02-03-git-aliases/</link>
      <pubDate>Wed, 03 Feb 2016 19:42:23 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-02-03-git-aliases/</guid>
      <description>How many times do type out the same repetitive commands for Git every day? Want to save some keystrokes? Use a Git alias. Consider the very useful but very long:
git log --graph --oneline --decorate  What a mouthful. But all you need to do, from any directory at the command line, is type:
git config --global alias.plog &#39;log --graph --oneline --decorate&#39;  Then from then on all you need to type is:</description>
    </item>
    
  </channel>
</rss>