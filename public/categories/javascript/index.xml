<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on Claire Parker-Jones Blog</title>
    <link>http://example.org/categories/javascript/</link>
    <description>Recent content in Javascript on Claire Parker-Jones Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 07 Nov 2016 21:24:01 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>When strict equality goes wrong</title>
      <link>http://example.org/blog/2016-11-07-when-strict-equality-goes-wrong/</link>
      <pubDate>Mon, 07 Nov 2016 21:24:01 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-11-07-when-strict-equality-goes-wrong/</guid>
      <description>I recently saw this code in the wild. Names have been changed to protect those involved.
function makeFizzbobs (widget) { if (widget === null) { return {}; } else { // Does something interesting with widget return 42; } }  I could imagine what the author of the code thought they were doing: they were guarding against an empty function parameter right? Cos null sounds like what you&amp;rsquo;d be left with if the user didn&amp;rsquo;t supply an argument like floop or 321.</description>
    </item>
    
    <item>
      <title>Super quick Regex TDD setup</title>
      <link>http://example.org/blog/2016-08-13-super-quick-regex-tdd-setup/</link>
      <pubDate>Sat, 13 Aug 2016 20:25:22 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-08-13-super-quick-regex-tdd-setup/</guid>
      <description>When you need to build a regex you could either (A) hack around in the console, getting confused and lost, or instead (B) use TDD and write some tests: you can have a clear list of strings your regex should match and those it shouldn&amp;rsquo;t, run them quickly and see whether the regex works and have readymade documentation for future use üèÜ
But how do you set that up? If it sounds like a lot of work, it isn&amp;rsquo;t.</description>
    </item>
    
    <item>
      <title>Trailing commas in JavaScript objects, yay or nay?</title>
      <link>http://example.org/blog/2016-06-07-trailing-commas-in-javascript-objects-yay-or-nay/</link>
      <pubDate>Tue, 07 Jun 2016 17:33:47 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-06-07-trailing-commas-in-javascript-objects-yay-or-nay/</guid>
      <description>TL;DR  A trailing comma on the final property of a JavaScript object is valid syntax in ECMAScript5 ... but it will throw an error in IE8 *surprise* üéâ Trailing commas are also allowed in arrays But if you try to parse an object with a trailing comma to JSON it will throw an error   Do you notice anything different about this object?
{ cat: &amp;quot;miaow&amp;quot;, dog: &amp;quot;woof&amp;quot;, frog: &amp;quot;ribbit&amp;quot;, }  Maybe that trailing comma after &amp;ldquo;ribbit&amp;rdquo; strikes you as a bit off.</description>
    </item>
    
    <item>
      <title>This one crazy tip will help you write gold-plated tests!!!1!</title>
      <link>http://example.org/blog/2016-05-18-this-one-crazy-tip-will-help-you-write-gold-plated-tests1/</link>
      <pubDate>Wed, 18 May 2016 20:17:36 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-05-18-this-one-crazy-tip-will-help-you-write-gold-plated-tests1/</guid>
      <description>Here is my top tip to help you write better tests, be they unit tests, integration tests, functional tests or unicorn tests:
Always write a failing test first.
There are three steps to TDD. You may have heard of the üö¶ traffic lights*:
 ‚ù§Ô∏è Red: write a failing test üíõ Amber: make the test pass üíö Green: improve the code you&amp;rsquo;ve just written, refactor  Or maybe red test -&amp;gt; green test -&amp;gt; refactor**.</description>
    </item>
    
    <item>
      <title>How to chain functions in JavaScript</title>
      <link>http://example.org/blog/2016-04-25-how-to-chain-functions-in-javascript/</link>
      <pubDate>Tue, 26 Apr 2016 20:21:04 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-04-25-how-to-chain-functions-in-javascript/</guid>
      <description>The chaining design pattern is lovely. üåÖ It means we can call several object methods in one line of code. You see this pattern used in jQuery a lot.
Instead of several repetitive lines (A) we have a cleaner one-liner (B) üç∞:
// (A) let sponge = new Cake(); sponge.mix(); sponge.bake(); sponge.eat(); // (B) let sponge = new Cake().mix().bake().eat();  But how? You can&amp;rsquo;t just randomly start chaining methods and hope they work.</description>
    </item>
    
    <item>
      <title>Semver in package.json</title>
      <link>http://example.org/blog/2016-03-09-semver-in-package-json/</link>
      <pubDate>Wed, 09 Mar 2016 21:56:35 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-03-09-semver-in-package-json/</guid>
      <description>TL;DR  Allow only patch changes: ~1.1.3, e.g. =1.1.3  Allow minor changes: ^1.1.3, e.g. =1.1.3    You might have noticed some unexpected characters next to the package versions of the dependencies or devDependencies properties in your package.json file:
&amp;quot;dependencies&amp;quot;: { &amp;quot;backbone&amp;quot;: &amp;quot;^1.3.1&amp;quot;, &amp;quot;express&amp;quot;: &amp;quot;~4.13.4&amp;quot; }  Semver First of all, let&amp;rsquo;s understand how packages are versioned and what each of those numbers represent.
A piece of software, e.</description>
    </item>
    
    <item>
      <title>Spies in Jasmine &amp; Sinon</title>
      <link>http://example.org/blog/2016-02-15-spies-in-jasmine-and-sinon/</link>
      <pubDate>Mon, 15 Feb 2016 18:13:45 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-02-15-spies-in-jasmine-and-sinon/</guid>
      <description>üîé TL;DR üîç  Terminology used by Jasmine, Sinon and other testing frameworks is not the same: one person&#39;s spy is another person&#39;s stub The equivalent of Sinon&#39;s sinon.spy(foo,&#39;bar&#39;) in Jasmine is spyOn(foo,&#39;bar&#39;).and.callThrough()   So you&amp;rsquo;re testing. In JavaScript. Perhaps you want to test:
 whether a method has been called what arguments the method was called with what the method returns  A reasonable request. You turn to your testing framework and it turns back to you and it says &amp;ldquo;Bob, you need to use a spy.</description>
    </item>
    
    <item>
      <title>npm all the things!</title>
      <link>http://example.org/blog/2016-02-01-npm-all-the-things/</link>
      <pubDate>Mon, 01 Feb 2016 21:43:35 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-02-01-npm-all-the-things/</guid>
      <description>Are you one of those mugs ‚òïÔ∏è still downloading zip files of libraries for their JavaScript projects? Well you don&amp;rsquo;t have to be! Leverage the power of the command line today and npm that thing!
npm is Node&amp;rsquo;s Package Manager (how did they come up with that name??) and I am having great fun with it at the moment - packaging, modularising and managing my JavaScript project dependencies with minimal pain.</description>
    </item>
    
    <item>
      <title>Scheduling Ruby and JavaScript jobs with Heroku</title>
      <link>http://example.org/blog/2016-01-06-scheduling-ruby-and-javascript-jobs-with-heroku/</link>
      <pubDate>Wed, 06 Jan 2016 21:37:32 +0000</pubDate>
      
      <guid>http://example.org/blog/2016-01-06-scheduling-ruby-and-javascript-jobs-with-heroku/</guid>
      <description>Need to do a job regularly in your app? If it&amp;rsquo;s on Heroku then there&amp;rsquo;s a free add-on that can run the job for you. It&amp;rsquo;s imaginatively called Heroku Scheduler. Here&amp;rsquo;s how I set up Ruby and JavaScript jobs ready to be scheduled.
Create your app. From the root directory, initialise git and create a Heroku app. I like to use the Heroku toolbelt for all my Heroku command line needs.</description>
    </item>
    
    <item>
      <title>NodeLists are not Arrays</title>
      <link>http://example.org/blog/2015-12-01-nodelists-are-not-arrays/</link>
      <pubDate>Tue, 01 Dec 2015 00:00:16 +0000</pubDate>
      
      <guid>http://example.org/blog/2015-12-01-nodelists-are-not-arrays/</guid>
      <description>When you&amp;rsquo;re working with the DOM, it&amp;rsquo;s tempting to think that when you select a group of elements from the page that you&amp;rsquo;ve got an array. Right? Wrong! It might look like a duck and walk like a duck, but it moos like a cow. Just what is this monster?! It&amp;rsquo;s a NodeList.
Try this in your browser console:
&amp;gt; var whoami = document.querySelectorAll(&#39;div&#39;); &amp;gt; Object.getPrototypeOf(whoami) NodeList {}  Compare this with:</description>
    </item>
    
    <item>
      <title>How to Deploy an AngularJS App on Heroku</title>
      <link>http://example.org/blog/2015-09-30-how-to-deploy-an-angular-app-on-heroku/</link>
      <pubDate>Wed, 30 Sep 2015 00:00:00 +0100</pubDate>
      
      <guid>http://example.org/blog/2015-09-30-how-to-deploy-an-angular-app-on-heroku/</guid>
      <description>Or getting an EAN app running on Heroku EAN rather than MEAN because we&amp;rsquo;ll be using Express, AngularJS and Node but not Mongo this time.
When googling deploying an AngularJS app to Heroku, all the tutorials I looked at (i.e. the top 3 in the first page of results &amp;hellip;) assumed I&amp;rsquo;d cloned the Angular seed app - which I hadn&amp;rsquo;t and didn&amp;rsquo;t want to. I had a dead simple one controller, one service AngularJS app (note: 1.</description>
    </item>
    
  </channel>
</rss>